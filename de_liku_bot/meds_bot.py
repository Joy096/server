import json
import os
import time
import threading
import requests
import logging
from bs4 import BeautifulSoup
from urllib.parse import quote
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

CONFIG_PATH = "/opt/de_liky_bot/config.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
def load_config():
    try:
        if not os.path.exists(CONFIG_PATH):
            default_config = {"token": "", "cities": [], "drugs": [], "interval_hours": 12, "chat_ids": []}
            os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
            with open(CONFIG_PATH, "w", encoding="utf-8") as f:
                json.dump(default_config, f, ensure_ascii=False, indent=4)
            return default_config
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return {"token": "", "cities": [], "drugs": [], "interval_hours": 12, "chat_ids": []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
def save_config(config):
    try:
        os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
        with open(CONFIG_PATH, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

config = load_config()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_TEXT = """–í—ñ—Ç–∞—é! –Ø ‚Äî ü§ñ *–î–µ –ª—ñ–∫–∏ Bot*.

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ª—ñ–∫—ñ–≤ —É –≤–∏–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç–∞—Ö –£–∫—Ä–∞—ó–Ω–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å [tabletki.ua](https://tabletki.ua).

–©–æ —è –≤–º—ñ—é:
üîé –®—É–∫–∞—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ
‚ûï –î–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –º—ñ—Å—Ç–∞ —Ç–∞ –ª—ñ–∫–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
üìã –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤
üîî –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏, –∫–æ–ª–∏ –ª—ñ–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –≤ –∞–ø—Ç–µ–∫–∞—Ö
‚öôÔ∏è –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

*–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.*

_–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è!_
"""

# –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –£–∫—Ä–∞–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
UKRAINE_CITIES = [
    "–ö–∏—ó–≤", "–•–∞—Ä–∫—ñ–≤", "–û–¥–µ—Å–∞", "–î–Ω—ñ–ø—Ä–æ", "–î–æ–Ω–µ—Ü—å–∫", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "–õ—å–≤—ñ–≤", 
    "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "–ú–∏–∫–æ–ª–∞—ó–≤", "–ú–∞—Ä—ñ—É–ø–æ–ª—å", "–õ—É–≥–∞–Ω—Å—å–∫", "–í—ñ–Ω–Ω–∏—Ü—è", 
    "–•–µ—Ä—Å–æ–Ω", "–ü–æ–ª—Ç–∞–≤–∞", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤", "–ß–µ—Ä–∫–∞—Å–∏", "–ñ–∏—Ç–æ–º–∏—Ä", "–°—É–º–∏", 
    "–†—ñ–≤–Ω–µ", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å", "–õ—É—Ü—å–∫", 
    "–£–∂–≥–æ—Ä–æ–¥", "–ö–∞–º'—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π", "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å", "–ë–µ—Ä–¥—è–Ω—Å—å–∫", "–ù—ñ–∫–æ–ø–æ–ª—å"
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        chat_id = update.effective_chat.id
        if "chat_ids" not in config:
            config["chat_ids"] = []
        if chat_id not in config["chat_ids"]:
            config["chat_ids"].append(chat_id)
            save_config(config)
            
        keyboard = [
            ["üîé –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"],
            ["üìã –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö", "üîé –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑"],
            ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(WELCOME_TEXT, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞
def search_drugs(drug_name, city_name=None):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept-Language': 'uk-UA,uk;q=0.9,ru;q=0.8,en-US;q=0.7,en;q=0.6'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    encoded_drug = quote(drug_name)
    url = f"https://tabletki.ua/uk/search/?q={encoded_drug}"
    if city_name:
        encoded_city = quote(city_name)
        url += f"&city={encoded_city}"
    
    try:
        logger.info(f"–ü–æ–∏—Å–∫: {drug_name} {f'–≤ {city_name}' if city_name else ''}, URL: {url}")
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        no_results_selectors = ['.search-result-empty', '.no-results', '.empty-results']
        for selector in no_results_selectors:
            no_results = soup.select(selector)
            if no_results:
                logger.info(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {drug_name} {f'–≤ {city_name}' if city_name else ''}")
                return []
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        results = []
        product_selectors = ['.search-result-item', '.product-item', '.med-item', '.result-item', '.item']
        
        products = []
        for selector in product_selectors:
            products = soup.select(selector)
            if products:
                break
        
        if not products:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
            products = soup.find_all('div', class_=lambda c: c and ('item' in c or 'product' in c or 'result' in c))
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–≥–∞–º
            if not products:
                products = soup.find_all(['div', 'li'], attrs={'data-id': True})
            
        for product in products:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                name_selectors = ['.item-title', '.product-name', '.title', 'h3', 'h2', '.name']
                name_elem = None
                for selector in name_selectors:
                    name_elem = product.select_one(selector)
                    if name_elem:
                        break
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                if not name_elem:
                    name_elem = product.get('data-name') or product.get('title')
                
                name = name_elem.text.strip() if hasattr(name_elem, 'text') else name_elem or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
                price_selectors = ['.price', '.cost', '.product-price', '.money']
                price_elem = None
                for selector in price_selectors:
                    price_elem = product.select_one(selector)
                    if price_elem:
                        break
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                if not price_elem:
                    price_elem = product.get('data-price')
                
                price = price_elem.text.strip() if hasattr(price_elem, 'text') else price_elem or "–¶—ñ–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞"
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–ø—Ç–µ–∫–∏
                pharmacy_selectors = ['.pharmacy-title', '.store-name', '.pharmacy-name', '.pharmacy', '.store']
                pharmacy_elem = None
                for selector in pharmacy_selectors:
                    pharmacy_elem = product.select_one(selector)
                    if pharmacy_elem:
                        break
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–ø—Ç–µ–∫—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                if not pharmacy_elem:
                    pharmacy_elem = product.get('data-pharmacy') or product.get('data-store')
                
                pharmacy = pharmacy_elem.text.strip() if hasattr(pharmacy_elem, 'text') else pharmacy_elem or "–ê–ø—Ç–µ–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∞"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, —Ñ–æ—Ä–º–∞, –≤–µ—Å –∏ —Ç.–¥.
                info_selectors = ['.description', '.product-desc', '.details', '.info']
                info_elem = None
                for selector in info_selectors:
                    info_elem = product.select_one(selector)
                    if info_elem:
                        break
                
                info = info_elem.text.strip() if info_elem else ""
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_elem = product.select_one('img')
                img_url = img_elem.get('src') if img_elem else ""
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
                link_elem = product.select_one('a')
                link = link_elem.get('href') if link_elem else ""
                if link and not link.startswith('http'):
                    link = f"https://tabletki.ua{link}"
                
                results.append({
                    "name": name,
                    "price": price,
                    "pharmacy": pharmacy,
                    "info": info,
                    "img_url": img_url,
                    "link": link,
                    "city": city_name if city_name else ""
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {drug_name} {f'–≤ {city_name}' if city_name else ''}")
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {drug_name} {f'–≤ {city_name}' if city_name else ''}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
def search_cities(city_pattern):
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        pattern = city_pattern.lower()
        matching_cities = [city for city in UKRAINE_CITIES if pattern in city.lower()]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É
        matching_cities.sort(key=lambda x: (0 if x.lower().startswith(pattern) else 1, len(x)))
        
        return matching_cities[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –≥–æ—Ä–æ–¥–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ
def check_drug_availability(drug_name, city_name):
    try:
        results = search_drugs(drug_name, city_name)
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è {drug_name} –≤ {city_name}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
def notify_drug_available(chat_id, drug_name, city_name, bot):
    try:
        results = check_drug_availability(drug_name, city_name)
        if results:
            message = f"üíä *{drug_name}* –∑'—è–≤–∏–≤—Å—è —É –º—ñ—Å—Ç—ñ *{city_name}*!\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 3 –∞–ø—Ç–µ–∫ —Å —Ü–µ–Ω–∞–º–∏
            for i, result in enumerate(results[:3]):
                message += f"{i+1}. {result['name']}\n   üí∞ {result['price']}\n   üè• {result['pharmacy']}\n\n"
            
            bot.send_message(chat_id, message, parse_mode="Markdown")
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /list
async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç-–≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = update.effective_chat.id
        user_tracking = config.get("tracking", {}).get(str(chat_id), [])
        
        if not user_tracking:
            await update.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")
            return
        
        text = "*–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏:*\n\n"
        
        for i, item in enumerate(user_tracking):
            drug = item.get("drug", "")
            city = item.get("city", "")
            text += f"{i+1}. üíä *{drug}* —É –º—ñ—Å—Ç—ñ üèôÔ∏è *{city}*\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        keyboard = []
        for i, item in enumerate(user_tracking):
            drug = item.get("drug", "")
            city = item.get("city", "")
            keyboard.append([InlineKeyboardButton(f"‚ùå {drug} ({city})", callback_data=f"remove_tracking:{i}")])
        
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ list: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /settings
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
            [InlineKeyboardButton("3 –≥–æ–¥–∏–Ω–∏", callback_data="interval:3")],
            [InlineKeyboardButton("6 –≥–æ–¥–∏–Ω", callback_data="interval:6")],
            [InlineKeyboardButton("12 –≥–æ–¥–∏–Ω", callback_data="interval:12")],
            [InlineKeyboardButton("24 –≥–æ–¥–∏–Ω–∏", callback_data="interval:24")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚è∞ –ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: –∫–æ–∂–Ω—ñ {config.get('interval_hours',12)} –≥–æ–¥–∏–Ω.\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ settings: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É.")

# –ö–æ–º–∞–Ω–¥–∞ /check
async def check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user_tracking = config.get("tracking", {}).get(str(chat_id), [])
        
        if not user_tracking:
            await update.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")
            return
        
        await update.message.reply_text("üîé –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤...")
        
        found = False
        for item in user_tracking:
            drug = item.get("drug", "")
            city = item.get("city", "")
            
            results = check_drug_availability(drug, city)
            if results:
                found = True
                message = f"üíä *{drug}* –¥–æ—Å—Ç—É–ø–Ω–∏–π —É –º—ñ—Å—Ç—ñ *{city}*!\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 3 –∞–ø—Ç–µ–∫ —Å —Ü–µ–Ω–∞–º–∏
                for i, result in enumerate(results[:3]):
                    message += f"{i+1}. {result['name']}\n   üí∞ {result['price']}\n   üè• {result['pharmacy']}\n\n"
                
                await update.message.reply_text(message, parse_mode="Markdown")
        
        if not found:
            await update.message.reply_text("‚ùå –ñ–æ–¥–Ω–∏—Ö –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç–∞—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ check: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª—ñ–∫—ñ–≤.")

# –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
async def search_and_show_drugs(update: Update, context: ContextTypes.DEFAULT_TYPE, query):
    try:
        await update.message.reply_text(f"üîé –ü–æ—à—É–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ \"{query}\"...")
        
        # –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        results = search_drugs(query)
        
        if not results:
            await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
            return False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
        unique_drugs = {}
        for result in results:
            name = result['name']
            if name not in unique_drugs:
                unique_drugs[name] = result
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
        keyboard = []
        for name in list(unique_drugs.keys())[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
            keyboard.append([InlineKeyboardButton(name, callback_data=f"select_drug_for_tracking:{name}")])
        
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:", 
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['search_results'] = unique_drugs
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return False

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
async def show_cities_for_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, city_pattern=None):
    try:
        if city_pattern:
            cities = search_cities(city_pattern)
        else:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
            cities = UKRAINE_CITIES[:10]
        
        if not cities:
            await update.callback_query.edit_message_text(
                "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –º—ñ—Å—Ç. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —â–µ —Ä–∞–∑:"
            )
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
        keyboard = []
        for city in cities:
            keyboard.append([InlineKeyboardButton(city, callback_data=f"select_city_for_tracking:{city}")])
        
        markup = InlineKeyboardMarkup(keyboard)
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—É:",
                reply_markup=markup
            )
        else:
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—É:",
                reply_markup=markup
            )
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏ –≥–æ—Ä–æ–¥–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
def add_to_tracking(chat_id, drug_name, city_name):
    try:
        if "tracking" not in config:
            config["tracking"] = {}
        
        if str(chat_id) not in config["tracking"]:
            config["tracking"][str(chat_id)] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
        user_tracking = config["tracking"][str(chat_id)]
        for item in user_tracking:
            if item.get("drug") == drug_name and item.get("city") == city_name:
                return False  # –£–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        config["tracking"][str(chat_id)].append({
            "drug": drug_name,
            "city": city_name,
            "added": time.time()
        })
        
        save_config(config)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
def remove_from_tracking(chat_id, index):
    try:
        if "tracking" not in config or str(chat_id) not in config["tracking"]:
            return False
        
        user_tracking = config["tracking"][str(chat_id)]
        if index >= len(user_tracking):
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        del user_tracking[index]
        save_config(config)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return False

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def schedule_checks(application):
    def loop():
        while True:
            interval_hours = config.get("interval_hours", 12)
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval_hours} —á–∞—Å–æ–≤")
            
            time.sleep(interval_hours * 3600)
            
            try:
                tracking = config.get("tracking", {})
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –¥–ª—è {len(tracking)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                for chat_id, user_tracking in tracking.items():
                    for item in user_tracking:
                        drug = item.get("drug", "")
                        city = item.get("city", "")
                        
                        if drug and city:
                            notify_drug_available(int(chat_id), drug, city, application.bot)
            except Exception as e:
                logger.error(f"Scheduled check error: {e}")
    
    t = threading.Thread(target=loop, daemon=True)
    t.start()
    logger.info(f"Background checker started with interval: {config.get('interval_hours', 12)} hours")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("select_drug_for_tracking:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–ø–∞—Ä–∞—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
            drug_name = query.data.split(":", 1)[1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç
            context.user_data["selected_drug"] = drug_name
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            context.user_data["waiting_for"] = "city_for_tracking"
            await show_cities_for_selection(update, context)
        
        elif query.data.startswith("select_city_for_tracking:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥
            city_name = query.data.split(":", 1)[1]
            drug_name = context.user_data.get("selected_drug", "")
            
            if not drug_name:
                await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            chat_id = update.effective_chat.id
            if add_to_tracking(chat_id, drug_name, city_name):
                await query.edit_message_text(
                    f"‚úÖ –ü—Ä–µ–ø–∞—Ä–∞—Ç *{drug_name}* –±—É–¥–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏—Å—è —É –º—ñ—Å—Ç—ñ *{city_name}*.\n\n"
                    f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –∑'—è–≤–∏—Ç—å—Å—è –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.",
                    parse_mode="Markdown"
                )
            else:
                await query.edit_message_text(
                    f"‚ÑπÔ∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç *{drug_name}* —É –º—ñ—Å—Ç—ñ *{city_name}* –≤–∂–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è.",
                    parse_mode="Markdown"
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop("waiting_for", None)
            context.user_data.pop("selected_drug", None)
        
        elif query.data.startswith("remove_tracking:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            index = int(query.data.split(":", 1)[1])
            chat_id = update.effective_chat.id
            
            user_tracking = config.get("tracking", {}).get(str(chat_id), [])
            if index < len(user_tracking):
                drug = user_tracking[index].get("drug", "")
                city = user_tracking[index].get("city", "")
                
                if remove_from_tracking(chat_id, index):
                    await query.edit_message_text(
                        f"üóëÔ∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç *{drug}* —É –º—ñ—Å—Ç—ñ *{city}* –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
                        parse_mode="Markdown"
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
                    )
            else:
                await query.edit_message_text("‚ùå –ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
        elif query.data.startswith("interval:"):
            hours = int(query.data.split(":", 1)[1])
            config["interval_hours"] = hours
            save_config(config)
            await query.edit_message_text(f"‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ *{hours} –≥–æ–¥–∏–Ω*.", parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        
        if text == "üîé –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è":
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –¥–ª—è –ø–æ—à—É–∫—É:")
            context.user_data["waiting_for"] = "drug_search"
            return
        
        if text == "üìã –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö":
            await list_items(update, context)
            return
        
        if text == "üîé –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑":
            await check_now(update, context)
            return
        
        if text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
            await settings(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waiting_for = context.user_data.get("waiting_for")
        
        if waiting_for == "drug_search":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            await search_and_show_drugs(update, context, text)
            return
        
        elif waiting_for == "city_for_tracking":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            await show_cities_for_selection(update, context, text)
            return
        
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º, —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            await search_and_show_drugs(update, context, text)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç—É.")

def main():
    try:
        if not config["token"]:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return
            
        app = ApplicationBuilder().token(config["token"]).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("list", list_items))
        app.add_handler(CommandHandler("check", check_now))
        app.add_handler(CommandHandler("settings", settings))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(button_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        schedule_checks(app)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot started!")
        print("Bot started!")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
